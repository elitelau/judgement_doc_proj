//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./grouping_shared_types');
//HELPER FUNCTIONS AND STRUCTURES

grouping_shared.ClusterJudge_group_scenarios_args = function(args) {
  this.crime = null;
  this.page_no = null;
  this.page_size = null;
  if (args) {
    if (args.crime !== undefined && args.crime !== null) {
      this.crime = args.crime;
    }
    if (args.page_no !== undefined && args.page_no !== null) {
      this.page_no = args.page_no;
    }
    if (args.page_size !== undefined && args.page_size !== null) {
      this.page_size = args.page_size;
    }
  }
};
grouping_shared.ClusterJudge_group_scenarios_args.prototype = {};
grouping_shared.ClusterJudge_group_scenarios_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.crime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.page_no = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.page_size = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

grouping_shared.ClusterJudge_group_scenarios_args.prototype.write = function(output) {
  output.writeStructBegin('ClusterJudge_group_scenarios_args');
  if (this.crime !== null && this.crime !== undefined) {
    output.writeFieldBegin('crime', Thrift.Type.STRING, 1);
    output.writeString(this.crime);
    output.writeFieldEnd();
  }
  if (this.page_no !== null && this.page_no !== undefined) {
    output.writeFieldBegin('page_no', Thrift.Type.I32, 2);
    output.writeI32(this.page_no);
    output.writeFieldEnd();
  }
  if (this.page_size !== null && this.page_size !== undefined) {
    output.writeFieldBegin('page_size', Thrift.Type.I32, 3);
    output.writeI32(this.page_size);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

grouping_shared.ClusterJudge_group_scenarios_result = function(args) {
  this.success = null;
  this.ouch = null;
  if (args instanceof ttypes.QueryFailure) {
    this.ouch = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.rpc_call_group_scenarios_struct(args.success);
    }
    if (args.ouch !== undefined && args.ouch !== null) {
      this.ouch = args.ouch;
    }
  }
};
grouping_shared.ClusterJudge_group_scenarios_result.prototype = {};
grouping_shared.ClusterJudge_group_scenarios_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.rpc_call_group_scenarios_struct();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch = new ttypes.QueryFailure();
        this.ouch.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

grouping_shared.ClusterJudge_group_scenarios_result.prototype.write = function(output) {
  output.writeStructBegin('ClusterJudge_group_scenarios_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch !== null && this.ouch !== undefined) {
    output.writeFieldBegin('ouch', Thrift.Type.STRUCT, 1);
    this.ouch.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

grouping_shared.ClusterJudge_get_docs_of_sgroup_args = function(args) {
  this.crime = null;
  this.data1 = null;
  this.data2 = null;
  this.page_no = null;
  this.page_size = null;
  if (args) {
    if (args.crime !== undefined && args.crime !== null) {
      this.crime = args.crime;
    }
    if (args.data1 !== undefined && args.data1 !== null) {
      this.data1 = args.data1;
    }
    if (args.data2 !== undefined && args.data2 !== null) {
      this.data2 = args.data2;
    }
    if (args.page_no !== undefined && args.page_no !== null) {
      this.page_no = args.page_no;
    }
    if (args.page_size !== undefined && args.page_size !== null) {
      this.page_size = args.page_size;
    }
  }
};
grouping_shared.ClusterJudge_get_docs_of_sgroup_args.prototype = {};
grouping_shared.ClusterJudge_get_docs_of_sgroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.crime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.data1 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.data2 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.page_no = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.page_size = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

grouping_shared.ClusterJudge_get_docs_of_sgroup_args.prototype.write = function(output) {
  output.writeStructBegin('ClusterJudge_get_docs_of_sgroup_args');
  if (this.crime !== null && this.crime !== undefined) {
    output.writeFieldBegin('crime', Thrift.Type.STRING, 1);
    output.writeString(this.crime);
    output.writeFieldEnd();
  }
  if (this.data1 !== null && this.data1 !== undefined) {
    output.writeFieldBegin('data1', Thrift.Type.STRING, 2);
    output.writeString(this.data1);
    output.writeFieldEnd();
  }
  if (this.data2 !== null && this.data2 !== undefined) {
    output.writeFieldBegin('data2', Thrift.Type.STRING, 3);
    output.writeString(this.data2);
    output.writeFieldEnd();
  }
  if (this.page_no !== null && this.page_no !== undefined) {
    output.writeFieldBegin('page_no', Thrift.Type.I32, 4);
    output.writeI32(this.page_no);
    output.writeFieldEnd();
  }
  if (this.page_size !== null && this.page_size !== undefined) {
    output.writeFieldBegin('page_size', Thrift.Type.I32, 5);
    output.writeI32(this.page_size);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

grouping_shared.ClusterJudge_get_docs_of_sgroup_result = function(args) {
  this.success = null;
  this.ouch = null;
  if (args instanceof ttypes.QueryFailure) {
    this.ouch = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.rpc_call_doc_group_struct(args.success);
    }
    if (args.ouch !== undefined && args.ouch !== null) {
      this.ouch = args.ouch;
    }
  }
};
grouping_shared.ClusterJudge_get_docs_of_sgroup_result.prototype = {};
grouping_shared.ClusterJudge_get_docs_of_sgroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.rpc_call_doc_group_struct();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch = new ttypes.QueryFailure();
        this.ouch.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

grouping_shared.ClusterJudge_get_docs_of_sgroup_result.prototype.write = function(output) {
  output.writeStructBegin('ClusterJudge_get_docs_of_sgroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ouch !== null && this.ouch !== undefined) {
    output.writeFieldBegin('ouch', Thrift.Type.STRUCT, 1);
    this.ouch.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

grouping_shared.ClusterJudge_get_scenarios_group_sentences_args = function(args) {
  this.crime = null;
  this.group_id = null;
  this.page_no = null;
  this.page_size = null;
  if (args) {
    if (args.crime !== undefined && args.crime !== null) {
      this.crime = args.crime;
    }
    if (args.group_id !== undefined && args.group_id !== null) {
      this.group_id = args.group_id;
    }
    if (args.page_no !== undefined && args.page_no !== null) {
      this.page_no = args.page_no;
    }
    if (args.page_size !== undefined && args.page_size !== null) {
      this.page_size = args.page_size;
    }
  }
};
grouping_shared.ClusterJudge_get_scenarios_group_sentences_args.prototype = {};
grouping_shared.ClusterJudge_get_scenarios_group_sentences_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.crime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.group_id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.page_no = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.page_size = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

grouping_shared.ClusterJudge_get_scenarios_group_sentences_args.prototype.write = function(output) {
  output.writeStructBegin('ClusterJudge_get_scenarios_group_sentences_args');
  if (this.crime !== null && this.crime !== undefined) {
    output.writeFieldBegin('crime', Thrift.Type.STRING, 1);
    output.writeString(this.crime);
    output.writeFieldEnd();
  }
  if (this.group_id !== null && this.group_id !== undefined) {
    output.writeFieldBegin('group_id', Thrift.Type.I32, 2);
    output.writeI32(this.group_id);
    output.writeFieldEnd();
  }
  if (this.page_no !== null && this.page_no !== undefined) {
    output.writeFieldBegin('page_no', Thrift.Type.I32, 3);
    output.writeI32(this.page_no);
    output.writeFieldEnd();
  }
  if (this.page_size !== null && this.page_size !== undefined) {
    output.writeFieldBegin('page_size', Thrift.Type.I32, 4);
    output.writeI32(this.page_size);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

grouping_shared.ClusterJudge_get_scenarios_group_sentences_result = function(args) {
  this.success = null;
  this.ouch = null;
  if (args instanceof ttypes.QueryFailure) {
    this.ouch = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Sentence]);
    }
    if (args.ouch !== undefined && args.ouch !== null) {
      this.ouch = args.ouch;
    }
  }
};
grouping_shared.ClusterJudge_get_scenarios_group_sentences_result.prototype = {};
grouping_shared.ClusterJudge_get_scenarios_group_sentences_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.success = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = new ttypes.Sentence();
          elem46.read(input);
          this.success.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch = new ttypes.QueryFailure();
        this.ouch.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

grouping_shared.ClusterJudge_get_scenarios_group_sentences_result.prototype.write = function(output) {
  output.writeStructBegin('ClusterJudge_get_scenarios_group_sentences_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter47 in this.success)
    {
      if (this.success.hasOwnProperty(iter47))
      {
        iter47 = this.success[iter47];
        iter47.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ouch !== null && this.ouch !== undefined) {
    output.writeFieldBegin('ouch', Thrift.Type.STRUCT, 1);
    this.ouch.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

grouping_shared.ClusterJudge_get_judge_bases_args = function(args) {
  this.docid_array = null;
  if (args) {
    if (args.docid_array !== undefined && args.docid_array !== null) {
      this.docid_array = Thrift.copyList(args.docid_array, [null]);
    }
  }
};
grouping_shared.ClusterJudge_get_judge_bases_args.prototype = {};
grouping_shared.ClusterJudge_get_judge_bases_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size48 = 0;
        var _rtmp352;
        this.docid_array = [];
        var _etype51 = 0;
        _rtmp352 = input.readListBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = input.readI32();
          this.docid_array.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

grouping_shared.ClusterJudge_get_judge_bases_args.prototype.write = function(output) {
  output.writeStructBegin('ClusterJudge_get_judge_bases_args');
  if (this.docid_array !== null && this.docid_array !== undefined) {
    output.writeFieldBegin('docid_array', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.docid_array.length);
    for (var iter55 in this.docid_array)
    {
      if (this.docid_array.hasOwnProperty(iter55))
      {
        iter55 = this.docid_array[iter55];
        output.writeI32(iter55);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

grouping_shared.ClusterJudge_get_judge_bases_result = function(args) {
  this.success = null;
  this.ouch = null;
  if (args instanceof ttypes.QueryFailure) {
    this.ouch = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.JudgeBases]);
    }
    if (args.ouch !== undefined && args.ouch !== null) {
      this.ouch = args.ouch;
    }
  }
};
grouping_shared.ClusterJudge_get_judge_bases_result.prototype = {};
grouping_shared.ClusterJudge_get_judge_bases_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.success = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = new ttypes.JudgeBases();
          elem62.read(input);
          this.success.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch = new ttypes.QueryFailure();
        this.ouch.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

grouping_shared.ClusterJudge_get_judge_bases_result.prototype.write = function(output) {
  output.writeStructBegin('ClusterJudge_get_judge_bases_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter63 in this.success)
    {
      if (this.success.hasOwnProperty(iter63))
      {
        iter63 = this.success[iter63];
        iter63.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ouch !== null && this.ouch !== undefined) {
    output.writeFieldBegin('ouch', Thrift.Type.STRUCT, 1);
    this.ouch.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

grouping_shared.ClusterJudge_group_judge_args = function(args) {
  this.crime = null;
  if (args) {
    if (args.crime !== undefined && args.crime !== null) {
      this.crime = args.crime;
    }
  }
};
grouping_shared.ClusterJudge_group_judge_args.prototype = {};
grouping_shared.ClusterJudge_group_judge_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.crime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

grouping_shared.ClusterJudge_group_judge_args.prototype.write = function(output) {
  output.writeStructBegin('ClusterJudge_group_judge_args');
  if (this.crime !== null && this.crime !== undefined) {
    output.writeFieldBegin('crime', Thrift.Type.STRING, 1);
    output.writeString(this.crime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

grouping_shared.ClusterJudge_group_judge_result = function(args) {
  this.success = null;
  this.ouch = null;
  if (args instanceof ttypes.QueryFailure) {
    this.ouch = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.JudgeGroup]);
    }
    if (args.ouch !== undefined && args.ouch !== null) {
      this.ouch = args.ouch;
    }
  }
};
grouping_shared.ClusterJudge_group_judge_result.prototype = {};
grouping_shared.ClusterJudge_group_judge_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size64 = 0;
        var _rtmp368;
        this.success = [];
        var _etype67 = 0;
        _rtmp368 = input.readListBegin();
        _etype67 = _rtmp368.etype;
        _size64 = _rtmp368.size;
        for (var _i69 = 0; _i69 < _size64; ++_i69)
        {
          var elem70 = null;
          elem70 = new ttypes.JudgeGroup();
          elem70.read(input);
          this.success.push(elem70);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ouch = new ttypes.QueryFailure();
        this.ouch.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

grouping_shared.ClusterJudge_group_judge_result.prototype.write = function(output) {
  output.writeStructBegin('ClusterJudge_group_judge_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter71 in this.success)
    {
      if (this.success.hasOwnProperty(iter71))
      {
        iter71 = this.success[iter71];
        iter71.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ouch !== null && this.ouch !== undefined) {
    output.writeFieldBegin('ouch', Thrift.Type.STRUCT, 1);
    this.ouch.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

grouping_shared.ClusterJudgeClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
grouping_shared.ClusterJudgeClient.prototype = {};
grouping_shared.ClusterJudgeClient.prototype.seqid = function() { return this._seqid; }
grouping_shared.ClusterJudgeClient.prototype.new_seqid = function() { return this._seqid += 1; }
grouping_shared.ClusterJudgeClient.prototype.group_scenarios = function(crime, page_no, page_size, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_group_scenarios(crime, page_no, page_size);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_group_scenarios(crime, page_no, page_size);
  }
};

grouping_shared.ClusterJudgeClient.prototype.send_group_scenarios = function(crime, page_no, page_size) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('group_scenarios', Thrift.MessageType.CALL, this.seqid());
  var args = new grouping_shared.ClusterJudge_group_scenarios_args();
  args.crime = crime;
  args.page_no = page_no;
  args.page_size = page_size;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

grouping_shared.ClusterJudgeClient.prototype.recv_group_scenarios = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new grouping_shared.ClusterJudge_group_scenarios_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch) {
    return callback(result.ouch);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('group_scenarios failed: unknown result');
};
grouping_shared.ClusterJudgeClient.prototype.get_docs_of_sgroup = function(crime, data1, data2, page_no, page_size, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_docs_of_sgroup(crime, data1, data2, page_no, page_size);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_docs_of_sgroup(crime, data1, data2, page_no, page_size);
  }
};

grouping_shared.ClusterJudgeClient.prototype.send_get_docs_of_sgroup = function(crime, data1, data2, page_no, page_size) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_docs_of_sgroup', Thrift.MessageType.CALL, this.seqid());
  var args = new grouping_shared.ClusterJudge_get_docs_of_sgroup_args();
  args.crime = crime;
  args.data1 = data1;
  args.data2 = data2;
  args.page_no = page_no;
  args.page_size = page_size;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

grouping_shared.ClusterJudgeClient.prototype.recv_get_docs_of_sgroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new grouping_shared.ClusterJudge_get_docs_of_sgroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch) {
    return callback(result.ouch);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_docs_of_sgroup failed: unknown result');
};
grouping_shared.ClusterJudgeClient.prototype.get_scenarios_group_sentences = function(crime, group_id, page_no, page_size, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_scenarios_group_sentences(crime, group_id, page_no, page_size);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_scenarios_group_sentences(crime, group_id, page_no, page_size);
  }
};

grouping_shared.ClusterJudgeClient.prototype.send_get_scenarios_group_sentences = function(crime, group_id, page_no, page_size) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_scenarios_group_sentences', Thrift.MessageType.CALL, this.seqid());
  var args = new grouping_shared.ClusterJudge_get_scenarios_group_sentences_args();
  args.crime = crime;
  args.group_id = group_id;
  args.page_no = page_no;
  args.page_size = page_size;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

grouping_shared.ClusterJudgeClient.prototype.recv_get_scenarios_group_sentences = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new grouping_shared.ClusterJudge_get_scenarios_group_sentences_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch) {
    return callback(result.ouch);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_scenarios_group_sentences failed: unknown result');
};
grouping_shared.ClusterJudgeClient.prototype.get_judge_bases = function(docid_array, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_judge_bases(docid_array);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_judge_bases(docid_array);
  }
};

grouping_shared.ClusterJudgeClient.prototype.send_get_judge_bases = function(docid_array) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_judge_bases', Thrift.MessageType.CALL, this.seqid());
  var args = new grouping_shared.ClusterJudge_get_judge_bases_args();
  args.docid_array = docid_array;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

grouping_shared.ClusterJudgeClient.prototype.recv_get_judge_bases = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new grouping_shared.ClusterJudge_get_judge_bases_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch) {
    return callback(result.ouch);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_judge_bases failed: unknown result');
};
grouping_shared.ClusterJudgeClient.prototype.group_judge = function(crime, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_group_judge(crime);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_group_judge(crime);
  }
};

grouping_shared.ClusterJudgeClient.prototype.send_group_judge = function(crime) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('group_judge', Thrift.MessageType.CALL, this.seqid());
  var args = new grouping_shared.ClusterJudge_group_judge_args();
  args.crime = crime;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

grouping_shared.ClusterJudgeClient.prototype.recv_group_judge = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new grouping_shared.ClusterJudge_group_judge_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ouch) {
    return callback(result.ouch);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('group_judge failed: unknown result');
};
grouping_shared.ClusterJudgeProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
grouping_shared.ClusterJudgeProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

grouping_shared.ClusterJudgeProcessor.prototype.process_group_scenarios = function(seqid, input, output) {
  var args = new grouping_shared.ClusterJudge_group_scenarios_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.group_scenarios.length === 3) {
    Q.fcall(this._handler.group_scenarios, args.crime, args.page_no, args.page_size)
      .then(function(result) {
        var result = new grouping_shared.ClusterJudge_group_scenarios_result({success: result});
        output.writeMessageBegin("group_scenarios", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.QueryFailure) {
          var result = new grouping_shared.ClusterJudge_group_scenarios_result(err);
          output.writeMessageBegin("group_scenarios", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("group_scenarios", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.group_scenarios(args.crime, args.page_no, args.page_size, function (err, result) {
      if (err == null || err instanceof ttypes.QueryFailure) {
        var result = new grouping_shared.ClusterJudge_group_scenarios_result((err != null ? err : {success: result}));
        output.writeMessageBegin("group_scenarios", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("group_scenarios", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

grouping_shared.ClusterJudgeProcessor.prototype.process_get_docs_of_sgroup = function(seqid, input, output) {
  var args = new grouping_shared.ClusterJudge_get_docs_of_sgroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_docs_of_sgroup.length === 5) {
    Q.fcall(this._handler.get_docs_of_sgroup, args.crime, args.data1, args.data2, args.page_no, args.page_size)
      .then(function(result) {
        var result = new grouping_shared.ClusterJudge_get_docs_of_sgroup_result({success: result});
        output.writeMessageBegin("get_docs_of_sgroup", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.QueryFailure) {
          var result = new grouping_shared.ClusterJudge_get_docs_of_sgroup_result(err);
          output.writeMessageBegin("get_docs_of_sgroup", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_docs_of_sgroup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_docs_of_sgroup(args.crime, args.data1, args.data2, args.page_no, args.page_size, function (err, result) {
      if (err == null || err instanceof ttypes.QueryFailure) {
        var result = new grouping_shared.ClusterJudge_get_docs_of_sgroup_result((err != null ? err : {success: result}));
        output.writeMessageBegin("get_docs_of_sgroup", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_docs_of_sgroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

grouping_shared.ClusterJudgeProcessor.prototype.process_get_scenarios_group_sentences = function(seqid, input, output) {
  var args = new grouping_shared.ClusterJudge_get_scenarios_group_sentences_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_scenarios_group_sentences.length === 4) {
    Q.fcall(this._handler.get_scenarios_group_sentences, args.crime, args.group_id, args.page_no, args.page_size)
      .then(function(result) {
        var result = new grouping_shared.ClusterJudge_get_scenarios_group_sentences_result({success: result});
        output.writeMessageBegin("get_scenarios_group_sentences", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.QueryFailure) {
          var result = new grouping_shared.ClusterJudge_get_scenarios_group_sentences_result(err);
          output.writeMessageBegin("get_scenarios_group_sentences", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_scenarios_group_sentences", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_scenarios_group_sentences(args.crime, args.group_id, args.page_no, args.page_size, function (err, result) {
      if (err == null || err instanceof ttypes.QueryFailure) {
        var result = new grouping_shared.ClusterJudge_get_scenarios_group_sentences_result((err != null ? err : {success: result}));
        output.writeMessageBegin("get_scenarios_group_sentences", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_scenarios_group_sentences", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

grouping_shared.ClusterJudgeProcessor.prototype.process_get_judge_bases = function(seqid, input, output) {
  var args = new grouping_shared.ClusterJudge_get_judge_bases_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_judge_bases.length === 1) {
    Q.fcall(this._handler.get_judge_bases, args.docid_array)
      .then(function(result) {
        var result = new grouping_shared.ClusterJudge_get_judge_bases_result({success: result});
        output.writeMessageBegin("get_judge_bases", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.QueryFailure) {
          var result = new grouping_shared.ClusterJudge_get_judge_bases_result(err);
          output.writeMessageBegin("get_judge_bases", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_judge_bases", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_judge_bases(args.docid_array, function (err, result) {
      if (err == null || err instanceof ttypes.QueryFailure) {
        var result = new grouping_shared.ClusterJudge_get_judge_bases_result((err != null ? err : {success: result}));
        output.writeMessageBegin("get_judge_bases", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_judge_bases", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

grouping_shared.ClusterJudgeProcessor.prototype.process_group_judge = function(seqid, input, output) {
  var args = new grouping_shared.ClusterJudge_group_judge_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.group_judge.length === 1) {
    Q.fcall(this._handler.group_judge, args.crime)
      .then(function(result) {
        var result = new grouping_shared.ClusterJudge_group_judge_result({success: result});
        output.writeMessageBegin("group_judge", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.QueryFailure) {
          var result = new grouping_shared.ClusterJudge_group_judge_result(err);
          output.writeMessageBegin("group_judge", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("group_judge", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.group_judge(args.crime, function (err, result) {
      if (err == null || err instanceof ttypes.QueryFailure) {
        var result = new grouping_shared.ClusterJudge_group_judge_result((err != null ? err : {success: result}));
        output.writeMessageBegin("group_judge", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("group_judge", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

