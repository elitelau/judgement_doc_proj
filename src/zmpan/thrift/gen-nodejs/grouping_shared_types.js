//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
if (typeof grouping_shared === 'undefined') {
  grouping_shared = {};
}
ttypes.InjuryLevel = {
  'SLIGHT' : 1,
  'SERIOUS' : 2,
  'DEATH' : 3,
  'UNKN' : 100
};
ttypes.Penalty = {
  'P_LIMIT' : 0,
  'P_DETENTION' : 1,
  'P_CTRL' : 2,
  'P_LIFE' : 3,
  'P_DEATH' : 4,
  'P_FREE' : 5
};
grouping_shared.PunishmentScenarios = module.exports.PunishmentScenarios = function(args) {
  this.first = null;
  this.second = null;
  if (args) {
    if (args.first !== undefined && args.first !== null) {
      this.first = args.first;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field first is unset!');
    }
    if (args.second !== undefined && args.second !== null) {
      this.second = args.second;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field second is unset!');
    }
  }
};
grouping_shared.PunishmentScenarios.prototype = {};
grouping_shared.PunishmentScenarios.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.first = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.second = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

grouping_shared.PunishmentScenarios.prototype.write = function(output) {
  output.writeStructBegin('PunishmentScenarios');
  if (this.first !== null && this.first !== undefined) {
    output.writeFieldBegin('first', Thrift.Type.I64, 1);
    output.writeI64(this.first);
    output.writeFieldEnd();
  }
  if (this.second !== null && this.second !== undefined) {
    output.writeFieldBegin('second', Thrift.Type.I64, 2);
    output.writeI64(this.second);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

grouping_shared.Injury = module.exports.Injury = function(args) {
  this.level = null;
  this.degree = null;
  this.number = null;
  if (args) {
    if (args.level !== undefined && args.level !== null) {
      this.level = args.level;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field level is unset!');
    }
    if (args.degree !== undefined && args.degree !== null) {
      this.degree = args.degree;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field degree is unset!');
    }
    if (args.number !== undefined && args.number !== null) {
      this.number = args.number;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field number is unset!');
    }
  }
};
grouping_shared.Injury.prototype = {};
grouping_shared.Injury.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.level = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this.degree = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.number = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

grouping_shared.Injury.prototype.write = function(output) {
  output.writeStructBegin('Injury');
  if (this.level !== null && this.level !== undefined) {
    output.writeFieldBegin('level', Thrift.Type.I32, 1);
    output.writeI32(this.level);
    output.writeFieldEnd();
  }
  if (this.degree !== null && this.degree !== undefined) {
    output.writeFieldBegin('degree', Thrift.Type.BYTE, 2);
    output.writeByte(this.degree);
    output.writeFieldEnd();
  }
  if (this.number !== null && this.number !== undefined) {
    output.writeFieldBegin('number', Thrift.Type.I16, 3);
    output.writeI16(this.number);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

grouping_shared.JudgeBases = module.exports.JudgeBases = function(args) {
  this.scenarios = null;
  this.amount = null;
  this.injury_scenarios = null;
  if (args) {
    if (args.scenarios !== undefined && args.scenarios !== null) {
      this.scenarios = new ttypes.PunishmentScenarios(args.scenarios);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field scenarios is unset!');
    }
    if (args.amount !== undefined && args.amount !== null) {
      this.amount = args.amount;
    }
    if (args.injury_scenarios !== undefined && args.injury_scenarios !== null) {
      this.injury_scenarios = Thrift.copyList(args.injury_scenarios, [ttypes.Injury]);
    }
  }
};
grouping_shared.JudgeBases.prototype = {};
grouping_shared.JudgeBases.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.scenarios = new ttypes.PunishmentScenarios();
        this.scenarios.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.amount = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.injury_scenarios = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.Injury();
          elem6.read(input);
          this.injury_scenarios.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

grouping_shared.JudgeBases.prototype.write = function(output) {
  output.writeStructBegin('JudgeBases');
  if (this.scenarios !== null && this.scenarios !== undefined) {
    output.writeFieldBegin('scenarios', Thrift.Type.STRUCT, 1);
    this.scenarios.write(output);
    output.writeFieldEnd();
  }
  if (this.amount !== null && this.amount !== undefined) {
    output.writeFieldBegin('amount', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.amount);
    output.writeFieldEnd();
  }
  if (this.injury_scenarios !== null && this.injury_scenarios !== undefined) {
    output.writeFieldBegin('injury_scenarios', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.injury_scenarios.length);
    for (var iter7 in this.injury_scenarios)
    {
      if (this.injury_scenarios.hasOwnProperty(iter7))
      {
        iter7 = this.injury_scenarios[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

grouping_shared.JudgeGroup = module.exports.JudgeGroup = function(args) {
  this.bases = null;
  this.doc_count = null;
  this.data1 = null;
  this.data2 = null;
  if (args) {
    if (args.bases !== undefined && args.bases !== null) {
      this.bases = new ttypes.JudgeBases(args.bases);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field bases is unset!');
    }
    if (args.doc_count !== undefined && args.doc_count !== null) {
      this.doc_count = args.doc_count;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field doc_count is unset!');
    }
    if (args.data1 !== undefined && args.data1 !== null) {
      this.data1 = args.data1;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field data1 is unset!');
    }
    if (args.data2 !== undefined && args.data2 !== null) {
      this.data2 = args.data2;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field data2 is unset!');
    }
  }
};
grouping_shared.JudgeGroup.prototype = {};
grouping_shared.JudgeGroup.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.bases = new ttypes.JudgeBases();
        this.bases.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.doc_count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.data1 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.data2 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

grouping_shared.JudgeGroup.prototype.write = function(output) {
  output.writeStructBegin('JudgeGroup');
  if (this.bases !== null && this.bases !== undefined) {
    output.writeFieldBegin('bases', Thrift.Type.STRUCT, 1);
    this.bases.write(output);
    output.writeFieldEnd();
  }
  if (this.doc_count !== null && this.doc_count !== undefined) {
    output.writeFieldBegin('doc_count', Thrift.Type.I32, 2);
    output.writeI32(this.doc_count);
    output.writeFieldEnd();
  }
  if (this.data1 !== null && this.data1 !== undefined) {
    output.writeFieldBegin('data1', Thrift.Type.STRING, 3);
    output.writeString(this.data1);
    output.writeFieldEnd();
  }
  if (this.data2 !== null && this.data2 !== undefined) {
    output.writeFieldBegin('data2', Thrift.Type.STRING, 4);
    output.writeString(this.data2);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

grouping_shared.ScenariosGroup = module.exports.ScenariosGroup = function(args) {
  this.scenarios = null;
  this.doc_count = null;
  this.data1 = null;
  this.data2 = null;
  if (args) {
    if (args.scenarios !== undefined && args.scenarios !== null) {
      this.scenarios = Thrift.copyList(args.scenarios, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field scenarios is unset!');
    }
    if (args.doc_count !== undefined && args.doc_count !== null) {
      this.doc_count = args.doc_count;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field doc_count is unset!');
    }
    if (args.data1 !== undefined && args.data1 !== null) {
      this.data1 = args.data1;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field data1 is unset!');
    }
    if (args.data2 !== undefined && args.data2 !== null) {
      this.data2 = args.data2;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field data2 is unset!');
    }
  }
};
grouping_shared.ScenariosGroup.prototype = {};
grouping_shared.ScenariosGroup.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.scenarios = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = input.readString();
          this.scenarios.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.doc_count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.data1 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.data2 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

grouping_shared.ScenariosGroup.prototype.write = function(output) {
  output.writeStructBegin('ScenariosGroup');
  if (this.scenarios !== null && this.scenarios !== undefined) {
    output.writeFieldBegin('scenarios', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.scenarios.length);
    for (var iter15 in this.scenarios)
    {
      if (this.scenarios.hasOwnProperty(iter15))
      {
        iter15 = this.scenarios[iter15];
        output.writeString(iter15);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.doc_count !== null && this.doc_count !== undefined) {
    output.writeFieldBegin('doc_count', Thrift.Type.I32, 2);
    output.writeI32(this.doc_count);
    output.writeFieldEnd();
  }
  if (this.data1 !== null && this.data1 !== undefined) {
    output.writeFieldBegin('data1', Thrift.Type.STRING, 3);
    output.writeString(this.data1);
    output.writeFieldEnd();
  }
  if (this.data2 !== null && this.data2 !== undefined) {
    output.writeFieldBegin('data2', Thrift.Type.STRING, 4);
    output.writeString(this.data2);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

grouping_shared.rpc_call_group_scenarios_struct = module.exports.rpc_call_group_scenarios_struct = function(args) {
  this.page_data = null;
  this.total_pages = null;
  if (args) {
    if (args.page_data !== undefined && args.page_data !== null) {
      this.page_data = Thrift.copyList(args.page_data, [ttypes.ScenariosGroup]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field page_data is unset!');
    }
    if (args.total_pages !== undefined && args.total_pages !== null) {
      this.total_pages = args.total_pages;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field total_pages is unset!');
    }
  }
};
grouping_shared.rpc_call_group_scenarios_struct.prototype = {};
grouping_shared.rpc_call_group_scenarios_struct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.page_data = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new ttypes.ScenariosGroup();
          elem22.read(input);
          this.page_data.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.total_pages = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

grouping_shared.rpc_call_group_scenarios_struct.prototype.write = function(output) {
  output.writeStructBegin('rpc_call_group_scenarios_struct');
  if (this.page_data !== null && this.page_data !== undefined) {
    output.writeFieldBegin('page_data', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.page_data.length);
    for (var iter23 in this.page_data)
    {
      if (this.page_data.hasOwnProperty(iter23))
      {
        iter23 = this.page_data[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.total_pages !== null && this.total_pages !== undefined) {
    output.writeFieldBegin('total_pages', Thrift.Type.I32, 2);
    output.writeI32(this.total_pages);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

grouping_shared.rpc_call_doc_group_struct = module.exports.rpc_call_doc_group_struct = function(args) {
  this.page_data = null;
  this.total_pages = null;
  if (args) {
    if (args.page_data !== undefined && args.page_data !== null) {
      this.page_data = Thrift.copyList(args.page_data, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field page_data is unset!');
    }
    if (args.total_pages !== undefined && args.total_pages !== null) {
      this.total_pages = args.total_pages;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field total_pages is unset!');
    }
  }
};
grouping_shared.rpc_call_doc_group_struct.prototype = {};
grouping_shared.rpc_call_doc_group_struct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.page_data = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = new ttypes.doc_info();
          elem30.read(input);
          this.page_data.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.total_pages = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

grouping_shared.rpc_call_doc_group_struct.prototype.write = function(output) {
  output.writeStructBegin('rpc_call_doc_group_struct');
  if (this.page_data !== null && this.page_data !== undefined) {
    output.writeFieldBegin('page_data', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.page_data.length);
    for (var iter31 in this.page_data)
    {
      if (this.page_data.hasOwnProperty(iter31))
      {
        iter31 = this.page_data[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.total_pages !== null && this.total_pages !== undefined) {
    output.writeFieldBegin('total_pages', Thrift.Type.I32, 2);
    output.writeI32(this.total_pages);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

grouping_shared.Sentence = module.exports.Sentence = function(args) {
  this.accused = null;
  this.penalty = null;
  this.duration = null;
  this.probation = null;
  this.fine = null;
  if (args) {
    if (args.accused !== undefined && args.accused !== null) {
      this.accused = args.accused;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field accused is unset!');
    }
    if (args.penalty !== undefined && args.penalty !== null) {
      this.penalty = args.penalty;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field penalty is unset!');
    }
    if (args.duration !== undefined && args.duration !== null) {
      this.duration = args.duration;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field duration is unset!');
    }
    if (args.probation !== undefined && args.probation !== null) {
      this.probation = args.probation;
    }
    if (args.fine !== undefined && args.fine !== null) {
      this.fine = args.fine;
    }
  }
};
grouping_shared.Sentence.prototype = {};
grouping_shared.Sentence.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.accused = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.penalty = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.duration = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.DOUBLE) {
        this.probation = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.DOUBLE) {
        this.fine = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

grouping_shared.Sentence.prototype.write = function(output) {
  output.writeStructBegin('Sentence');
  if (this.accused !== null && this.accused !== undefined) {
    output.writeFieldBegin('accused', Thrift.Type.STRING, 2);
    output.writeString(this.accused);
    output.writeFieldEnd();
  }
  if (this.penalty !== null && this.penalty !== undefined) {
    output.writeFieldBegin('penalty', Thrift.Type.I32, 3);
    output.writeI32(this.penalty);
    output.writeFieldEnd();
  }
  if (this.duration !== null && this.duration !== undefined) {
    output.writeFieldBegin('duration', Thrift.Type.I32, 4);
    output.writeI32(this.duration);
    output.writeFieldEnd();
  }
  if (this.probation !== null && this.probation !== undefined) {
    output.writeFieldBegin('probation', Thrift.Type.DOUBLE, 5);
    output.writeDouble(this.probation);
    output.writeFieldEnd();
  }
  if (this.fine !== null && this.fine !== undefined) {
    output.writeFieldBegin('fine', Thrift.Type.DOUBLE, 6);
    output.writeDouble(this.fine);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

grouping_shared.doc_info = module.exports.doc_info = function(args) {
  this.docid = null;
  this.sentences = null;
  this.injury = null;
  this.amount = null;
  this.title = null;
  this.name = null;
  this.date = null;
  this.court_name = null;
  this.kind = null;
  this.full_text = null;
  if (args) {
    if (args.docid !== undefined && args.docid !== null) {
      this.docid = args.docid;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field docid is unset!');
    }
    if (args.sentences !== undefined && args.sentences !== null) {
      this.sentences = Thrift.copyList(args.sentences, [ttypes.Sentence]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sentences is unset!');
    }
    if (args.injury !== undefined && args.injury !== null) {
      this.injury = args.injury;
    }
    if (args.amount !== undefined && args.amount !== null) {
      this.amount = args.amount;
    }
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.date !== undefined && args.date !== null) {
      this.date = args.date;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field date is unset!');
    }
    if (args.court_name !== undefined && args.court_name !== null) {
      this.court_name = args.court_name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field court_name is unset!');
    }
    if (args.kind !== undefined && args.kind !== null) {
      this.kind = args.kind;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field kind is unset!');
    }
    if (args.full_text !== undefined && args.full_text !== null) {
      this.full_text = args.full_text;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field full_text is unset!');
    }
  }
};
grouping_shared.doc_info.prototype = {};
grouping_shared.doc_info.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.docid = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.sentences = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new ttypes.Sentence();
          elem38.read(input);
          this.sentences.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.injury = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.amount = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.date = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.court_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BYTE) {
        this.kind = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.full_text = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

grouping_shared.doc_info.prototype.write = function(output) {
  output.writeStructBegin('doc_info');
  if (this.docid !== null && this.docid !== undefined) {
    output.writeFieldBegin('docid', Thrift.Type.I32, 1);
    output.writeI32(this.docid);
    output.writeFieldEnd();
  }
  if (this.sentences !== null && this.sentences !== undefined) {
    output.writeFieldBegin('sentences', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.sentences.length);
    for (var iter39 in this.sentences)
    {
      if (this.sentences.hasOwnProperty(iter39))
      {
        iter39 = this.sentences[iter39];
        iter39.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.injury !== null && this.injury !== undefined) {
    output.writeFieldBegin('injury', Thrift.Type.I32, 3);
    output.writeI32(this.injury);
    output.writeFieldEnd();
  }
  if (this.amount !== null && this.amount !== undefined) {
    output.writeFieldBegin('amount', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.amount);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 5);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 6);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.date !== null && this.date !== undefined) {
    output.writeFieldBegin('date', Thrift.Type.STRING, 7);
    output.writeString(this.date);
    output.writeFieldEnd();
  }
  if (this.court_name !== null && this.court_name !== undefined) {
    output.writeFieldBegin('court_name', Thrift.Type.STRING, 8);
    output.writeString(this.court_name);
    output.writeFieldEnd();
  }
  if (this.kind !== null && this.kind !== undefined) {
    output.writeFieldBegin('kind', Thrift.Type.BYTE, 9);
    output.writeByte(this.kind);
    output.writeFieldEnd();
  }
  if (this.full_text !== null && this.full_text !== undefined) {
    output.writeFieldBegin('full_text', Thrift.Type.STRING, 10);
    output.writeString(this.full_text);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

grouping_shared.QueryFailure = module.exports.QueryFailure = function(args) {
  Thrift.TException.call(this, "grouping_shared.QueryFailure")
  this.name = "grouping_shared.QueryFailure"
  this.code = null;
  this.desc = null;
  if (args) {
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field code is unset!');
    }
    if (args.desc !== undefined && args.desc !== null) {
      this.desc = args.desc;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field desc is unset!');
    }
  }
};
Thrift.inherits(grouping_shared.QueryFailure, Thrift.TException);
grouping_shared.QueryFailure.prototype.name = 'QueryFailure';
grouping_shared.QueryFailure.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this.code = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.desc = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

grouping_shared.QueryFailure.prototype.write = function(output) {
  output.writeStructBegin('QueryFailure');
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.BYTE, 1);
    output.writeByte(this.code);
    output.writeFieldEnd();
  }
  if (this.desc !== null && this.desc !== undefined) {
    output.writeFieldBegin('desc', Thrift.Type.STRING, 2);
    output.writeString(this.desc);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

